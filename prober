#!/usr/bin/python

import sys,time
import easysnmp
import math
from easysnmp import Session
from easysnmp import snmp_get,snmp_walk

information_agt=sys.argv[1]
ttl_information=information_agt.split(':')
ip_addr_agt=ttl_information[0]
agt_all_port_info=ttl_information[1]
info_community_agt=ttl_information[2]
all_sampl_of_frq=float(sys.argv[2])
sampl_no_ttl=int(sys.argv[3])
time_of_sampl=1/all_sampl_of_frq 
oids=[]
new_oids=[]
old_oids=[]

for all_numb_oids in range(4,len(sys.argv)):
	oids.append(sys.argv[all_numb_oids])
oids.insert(0,'1.3.6.1.2.1.1.3.0')

def deepika():
	global new_oids, new_time
	session=Session(hostname=ip_addr_agt,remote_port=agt_all_port_info,community='public',version=2,timeout=1,retries=1)
	req_response=session.get(oids)
	old_oids=[]
	

	for oids_all in range(1,len(req_response)):
		if req_response[oids_all].value!='NOSUCHOBJECT' and req_response[oids_all].value!='NOSUCHINSTANCE':
			old_oids.append(int(req_response[oids_all].value))
			
			if count!=0 and len(new_oids)>0:
				oid_diff=int(old_oids[oids_all-1]) - int(new_oids[oids_all-1])
				time_diff=round(old_time-new_time,1)
				rate = int(oid_diff / time_diff)
				if rate < 0 :
					if req_response[oids_all].snmp_type == 'COUNTER32': 
						oid_diff = oid_diff + 2**32
						print(str(old_time) +"|"+ str(oid_diff / time_diff) +"|")
					elif req_response[oids_all].snmp_type == 'COUNTER64':
						oid_diff = oid_diff + 2**64
						print(str(old_time) +"|"+ str(oid_diff / time_diff) +"|")
				else:
					print(str(old_time) +"|"+ str(rate) +"|")

	new_oids=old_oids
	new_time=old_time


if sampl_no_ttl==-1:
	count=0
	new_oids=[]
	while True:
		old_time=(time.time())
		deepika()
		req_response_time=(time.time())
		count = count+1
		time.sleep(abs(time_of_sampl - req_response_time + old_time))
else:
	new_oids=[]
	for count in range(0,sampl_no_ttl+1):
		old_time=(time.time())
		deepika()
		req_response_time=(time.time())
		time.sleep(abs(time_of_sampl - req_response_time + old_time))